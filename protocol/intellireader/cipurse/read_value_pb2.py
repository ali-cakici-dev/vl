# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cipurse/read_value.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='cipurse/read_value.proto',
  package='cipurse.read_value',
  syntax='proto2',
  serialized_pb=_b('\n\x18\x63ipurse/read_value.proto\x12\x12\x63ipurse.read_value\"J\n\tReadValue\x12\x15\n\rshort_file_id\x18\x01 \x02(\r\x12\r\n\x05\x63ount\x18\x02 \x02(\r\x12\x17\n\x0c\x66irst_record\x18\x03 \x01(\r:\x01\x31\"\x1c\n\x06Values\x12\x12\n\x06values\x18\x01 \x03(\x11\x42\x02\x10\x01')
)




_READVALUE = _descriptor.Descriptor(
  name='ReadValue',
  full_name='cipurse.read_value.ReadValue',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='short_file_id', full_name='cipurse.read_value.ReadValue.short_file_id', index=0,
      number=1, type=13, cpp_type=3, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='count', full_name='cipurse.read_value.ReadValue.count', index=1,
      number=2, type=13, cpp_type=3, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='first_record', full_name='cipurse.read_value.ReadValue.first_record', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=48,
  serialized_end=122,
)


_VALUES = _descriptor.Descriptor(
  name='Values',
  full_name='cipurse.read_value.Values',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='values', full_name='cipurse.read_value.Values.values', index=0,
      number=1, type=17, cpp_type=1, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001')), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=124,
  serialized_end=152,
)

DESCRIPTOR.message_types_by_name['ReadValue'] = _READVALUE
DESCRIPTOR.message_types_by_name['Values'] = _VALUES
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

ReadValue = _reflection.GeneratedProtocolMessageType('ReadValue', (_message.Message,), dict(
  DESCRIPTOR = _READVALUE,
  __module__ = 'cipurse.read_value_pb2'
  # @@protoc_insertion_point(class_scope:cipurse.read_value.ReadValue)
  ))
_sym_db.RegisterMessage(ReadValue)

Values = _reflection.GeneratedProtocolMessageType('Values', (_message.Message,), dict(
  DESCRIPTOR = _VALUES,
  __module__ = 'cipurse.read_value_pb2'
  # @@protoc_insertion_point(class_scope:cipurse.read_value.Values)
  ))
_sym_db.RegisterMessage(Values)


_VALUES.fields_by_name['values'].has_options = True
_VALUES.fields_by_name['values']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))
# @@protoc_insertion_point(module_scope)
